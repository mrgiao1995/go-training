// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: flight.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyFlightClient is the client API for MyFlight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyFlightClient interface {
	CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	SearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error)
	FlightDetails(ctx context.Context, in *FindFlightRequest, opts ...grpc.CallOption) (*Flight, error)
}

type myFlightClient struct {
	cc grpc.ClientConnInterface
}

func NewMyFlightClient(cc grpc.ClientConnInterface) MyFlightClient {
	return &myFlightClient{cc}
}

func (c *myFlightClient) CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/proto.MyFlight/CreateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myFlightClient) UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/proto.MyFlight/UpdateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myFlightClient) SearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error) {
	out := new(SearchFlightResponse)
	err := c.cc.Invoke(ctx, "/proto.MyFlight/SearchFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myFlightClient) FlightDetails(ctx context.Context, in *FindFlightRequest, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/proto.MyFlight/FlightDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyFlightServer is the server API for MyFlight service.
// All implementations must embed UnimplementedMyFlightServer
// for forward compatibility
type MyFlightServer interface {
	CreateFlight(context.Context, *Flight) (*Flight, error)
	UpdateFlight(context.Context, *Flight) (*Flight, error)
	SearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error)
	FlightDetails(context.Context, *FindFlightRequest) (*Flight, error)
	mustEmbedUnimplementedMyFlightServer()
}

// UnimplementedMyFlightServer must be embedded to have forward compatible implementations.
type UnimplementedMyFlightServer struct {
}

func (UnimplementedMyFlightServer) CreateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedMyFlightServer) UpdateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedMyFlightServer) SearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlight not implemented")
}
func (UnimplementedMyFlightServer) FlightDetails(context.Context, *FindFlightRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlightDetails not implemented")
}
func (UnimplementedMyFlightServer) mustEmbedUnimplementedMyFlightServer() {}

// UnsafeMyFlightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyFlightServer will
// result in compilation errors.
type UnsafeMyFlightServer interface {
	mustEmbedUnimplementedMyFlightServer()
}

func RegisterMyFlightServer(s grpc.ServiceRegistrar, srv MyFlightServer) {
	s.RegisterService(&MyFlight_ServiceDesc, srv)
}

func _MyFlight_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyFlightServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyFlight/CreateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyFlightServer).CreateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyFlight_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyFlightServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyFlight/UpdateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyFlightServer).UpdateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyFlight_SearchFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyFlightServer).SearchFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyFlight/SearchFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyFlightServer).SearchFlight(ctx, req.(*SearchFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyFlight_FlightDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyFlightServer).FlightDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyFlight/FlightDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyFlightServer).FlightDetails(ctx, req.(*FindFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyFlight_ServiceDesc is the grpc.ServiceDesc for MyFlight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyFlight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MyFlight",
	HandlerType: (*MyFlightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlight",
			Handler:    _MyFlight_CreateFlight_Handler,
		},
		{
			MethodName: "UpdateFlight",
			Handler:    _MyFlight_UpdateFlight_Handler,
		},
		{
			MethodName: "SearchFlight",
			Handler:    _MyFlight_SearchFlight_Handler,
		},
		{
			MethodName: "FlightDetails",
			Handler:    _MyFlight_FlightDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flight.proto",
}
