// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: booking.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyBookingClient is the client API for MyBooking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyBookingClient interface {
	CreateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error)
	ViewBooking(ctx context.Context, in *ViewBookingRequest, opts ...grpc.CallOption) (*ViewBookingResponse, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*Empty, error)
	GetBookings(ctx context.Context, in *GetBookingsRequest, opts ...grpc.CallOption) (*Bookings, error)
}

type myBookingClient struct {
	cc grpc.ClientConnInterface
}

func NewMyBookingClient(cc grpc.ClientConnInterface) MyBookingClient {
	return &myBookingClient{cc}
}

func (c *myBookingClient) CreateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/proto.MyBooking/CreateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myBookingClient) ViewBooking(ctx context.Context, in *ViewBookingRequest, opts ...grpc.CallOption) (*ViewBookingResponse, error) {
	out := new(ViewBookingResponse)
	err := c.cc.Invoke(ctx, "/proto.MyBooking/ViewBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myBookingClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.MyBooking/CancelBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myBookingClient) GetBookings(ctx context.Context, in *GetBookingsRequest, opts ...grpc.CallOption) (*Bookings, error) {
	out := new(Bookings)
	err := c.cc.Invoke(ctx, "/proto.MyBooking/GetBookings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyBookingServer is the server API for MyBooking service.
// All implementations must embed UnimplementedMyBookingServer
// for forward compatibility
type MyBookingServer interface {
	CreateBooking(context.Context, *Booking) (*Booking, error)
	ViewBooking(context.Context, *ViewBookingRequest) (*ViewBookingResponse, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*Empty, error)
	GetBookings(context.Context, *GetBookingsRequest) (*Bookings, error)
	mustEmbedUnimplementedMyBookingServer()
}

// UnimplementedMyBookingServer must be embedded to have forward compatible implementations.
type UnimplementedMyBookingServer struct {
}

func (UnimplementedMyBookingServer) CreateBooking(context.Context, *Booking) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedMyBookingServer) ViewBooking(context.Context, *ViewBookingRequest) (*ViewBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewBooking not implemented")
}
func (UnimplementedMyBookingServer) CancelBooking(context.Context, *CancelBookingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedMyBookingServer) GetBookings(context.Context, *GetBookingsRequest) (*Bookings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookings not implemented")
}
func (UnimplementedMyBookingServer) mustEmbedUnimplementedMyBookingServer() {}

// UnsafeMyBookingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyBookingServer will
// result in compilation errors.
type UnsafeMyBookingServer interface {
	mustEmbedUnimplementedMyBookingServer()
}

func RegisterMyBookingServer(s grpc.ServiceRegistrar, srv MyBookingServer) {
	s.RegisterService(&MyBooking_ServiceDesc, srv)
}

func _MyBooking_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyBookingServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyBooking/CreateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyBookingServer).CreateBooking(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyBooking_ViewBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyBookingServer).ViewBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyBooking/ViewBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyBookingServer).ViewBooking(ctx, req.(*ViewBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyBooking_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyBookingServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyBooking/CancelBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyBookingServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyBooking_GetBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyBookingServer).GetBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MyBooking/GetBookings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyBookingServer).GetBookings(ctx, req.(*GetBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyBooking_ServiceDesc is the grpc.ServiceDesc for MyBooking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyBooking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MyBooking",
	HandlerType: (*MyBookingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _MyBooking_CreateBooking_Handler,
		},
		{
			MethodName: "ViewBooking",
			Handler:    _MyBooking_ViewBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _MyBooking_CancelBooking_Handler,
		},
		{
			MethodName: "GetBookings",
			Handler:    _MyBooking_GetBookings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking.proto",
}
